<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find bigman_gazebo)/worlds/bigman.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find bigman_urdf)/urdf/bigman_robot.urdf.xacro'" />

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -z 0.001 -model bigman -param robot_description"/>

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
  <!-- ros_control bigman launch file -->
  <!--include file="$(find bigman_control)/launch/bigman_position_torque_control_lower_body.launch" /-->
  <include file="$(find bigman_control)/launch/bigman_position_torque_control.launch">
  </include>
 

 
 <!--node pkg="bigman_control" name="bigman_torque_control_node" type="bigman_torque_control_node" output="screen"/-->
 
 

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
 <!-- open rviz and load rviz configuration file -->
 <!--node pkg="rviz" type="rviz" name="rviz" args="-d $(find bigman_urdf)/launch/bigman.rviz"/-->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
 <!-- start tf_broadercast node, it will broadcast the pose of all segments of loaded robot -->
 <!--node name="tf_broadcaster_node" pkg="tf_broadcaster" type="tf_broadcaster_node"/-->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
 <!-- start stability_indicator_node -->
 <!--node name="stability_indicator_node" pkg="stability_indicator" type="stability_indicator_node"/-->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
<!-- start support_polygon node -->
<!--node name="support_polygon_node" pkg="support_polygon" type="support_polygon_node" args="/bigman/sensor/bumper/LFoot_bumper /bigman/sensor/bumper/RFoot_bumper support_polygon ground" /-->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
<!-- start zmp node -->
<!-- node name="zmp_node" pkg="zmp" type="zmp_node" args="LAnkLat_ft_sensor_topic RAnkLat_ft_sensor_topic /bigman/zmp visualization_marker_zmp ground" /-->
<!-- rosrun command -->
<!-- rosrun zmp zmp_node LAnkLat_ft_sensor_topic RAnkLat_ft_sensor_topic /bigman/zmp visualization_marker_zmp ground -->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
 <!-- start com node -->
 <!--node name="com_node" pkg="com" type="com_node" args="/bigman/joint_states /bigman/CoM visualization_marker_CoM base_link" /-->

<!--oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo-->
<!-- start com_projection node -->
<!--node name="com_projection_node" pkg="com_projection" type="com_projection_node" args="/gazebo/model_states /bigman/CoM visualization_marker_CoM_projection ground" /-->


</launch>

